@* @page "/player/registration"
@inject IClient _httpClient
@inject NavigationManager _navManager
<h3>Create New Player Account</h3>

@if(!string.IsNullOrEmpty(message)) {
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Username</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.UserName" />
            <ValidationMessage For="@(() => RegistrationModel.UserName)" />
        </div>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    PlayerDto RegistrationModel = new PlayerDto();
    string message = "";
    private async Task HandleRegistration()
    {
        try {
            await _httpClient.RegisterAsync(RegistrationModel);
            NavigateToLogin();
        }
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Response;
        }
    }

    private void NavigateToLogin()
    {
        _navManager.NavigateTo("/player/login");
    }
}
 *@