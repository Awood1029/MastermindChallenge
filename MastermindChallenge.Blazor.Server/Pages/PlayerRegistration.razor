@page "/player/registration"
@inject IClient _httpClient
@inject NavigationManager _navManager
<h3>Create New Player Account</h3>

@if(!string.IsNullOrEmpty(message)) {
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h3 class="text-center">Register</h3>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="userName">Username</label>
                            <InputText class="form-control" @bind-Value="RegistrationModel.UserName" />
                            <ValidationMessage For="@(() => RegistrationModel.UserName)" />
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
                            <ValidationMessage For="@(() => RegistrationModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary mt-2 w-100" disabled="@isLoading">Register</button>
                        @if (isLoading)
                        {
                            <p>Loading...</p>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    PlayerDto RegistrationModel = new PlayerDto();
    private string message = "";
    private bool isLoading = false;
    private async Task HandleRegistration()
    {
        isLoading = true;
        try {
            await _httpClient.RegisterAsync(RegistrationModel);
            NavigateToLogin();
        }
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Response;
        }
        isLoading = false;
    }

    private void NavigateToLogin()
    {
        _navManager.NavigateTo("/player/login");
    }
}
