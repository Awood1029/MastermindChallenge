@page "/game"
@using MastermindChallenge.Blazor.Server.Models
@using MastermindChallenge.Blazor.Server.Services.Game
@using System.Security.Claims
@inject IClient _httpClient
@inject IGameService _gameService
@inject AuthenticationStateProvider _authenticationStateProvider


    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <h3>Game</h3>
                <div class="card">
                    <div class="card">
                        <div class="card-body">
                            @if (!gameStarted)
                            {
                                <EditForm Model="gamePageModel" OnInvalidSubmit="StartGame">
                                    <InputRadioGroup @bind-Value="gamePageModel.Difficulty">
                                        <div>
                                            <InputRadio id="easy" Value="4" Checked />
                                            <label for="easy">Easy</label>
                                        </div>

                                        <div>
                                            <InputRadio id="medium" Value="5" />
                                            <label for="medium">Medium</label>
                                        </div>

                                        <div>
                                            <InputRadio id="hard" Value="6" />
                                            <label for="hard">Hard</label>
                                        </div>
                                    </InputRadioGroup>
                                    <button type="submit" class="btn btn-primary" @onclick="StartGame">Start Game</button>
                                </EditForm>
                            }
                            else
                            {
                                @if (!gameEnded)
                                {
                                    <p>Attempts: @guessCount / @MAX_ATTEMPTS </p>
                                    <h5 class="card-title">Guess the Number</h5>
                                    <p class="card-text">Enter your guess below:</p>
                                    <EditForm Model="gamePageModel" OnValidSubmit="HandleGuess">
                                        <div class="form-group">
                                            <InputText class="form-control" @bind-Value="gamePageModel.PlayerGuess" />
                                            <ValidationMessage For="@(() => gamePageModel.PlayerGuess)" />
                                        </div>
                                        <button type="submit" class="btn btn-primary btn-block">Submit Guess</button>
                                    </EditForm>
                                    <button class="btn btn-primary btn-block" @onclick="GetHint">Get Hint</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="RestartGame">Play Again</button>
                                }

                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <h3>History</h3>
                <div class="card">
                    <div class="card-body">
                        @if (feedback.Count > 0)
                        {
                            @foreach (var message in feedback)
                            {
                                <p>@message</p>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
<button type="submit" class="btn btn-primary" @onclick="GiveAnswer">Give answer</button>


@code {
    private bool gameStarted = false;
    private bool gameEnded = false;
    private bool gameWon = false;
    private List<string> feedback = new List<string>();
    private int guessCount = 0;
    private const int MAX_ATTEMPTS = 10;
    GamePage gamePageModel = new GamePage();
    int[] answerToGuess;
    int[] playerGuess;
    SaveGameDto gameDto = new SaveGameDto();
    int remainingHints;

    public async void StartGame()
    {
        gameEnded = false;
        gameStarted = true;
        feedback = new List<string>();
        guessCount = 0;
        playerGuess = new int[gamePageModel.Difficulty];
        remainingHints = gamePageModel.Difficulty;

        answerToGuess = await _gameService.GetRandomNumber(gamePageModel.Difficulty);
    }

    private void HandleGuess()
    {
        var numCorrect = 0;
        var positionCorrect = 0;
        var answerTracker = new Dictionary<int, int>();

        if(gamePageModel.PlayerGuess == null || gamePageModel.PlayerGuess.Length != answerToGuess.Length)
        {
            feedback.Add($"Invalid guess. Please only guess {answerToGuess.Length} digits.");
            return;
        }

        for (int i = 0; i < gamePageModel.PlayerGuess.Length; i++)
        {
            if(Char.IsLetter(gamePageModel.PlayerGuess[i]))
            {
                feedback.Add($"Invalid guess. Please only use numbers.");
                return;
            }
            playerGuess[i] = int.Parse(gamePageModel.PlayerGuess[i].ToString());
        }

        // This will be used to improve the efficiency of determining if the player guessed a number correctly
        foreach (var num in answerToGuess)
        {
            if (answerTracker.ContainsKey(num))
            {
                answerTracker[num]++;
            }
            else
            {
                answerTracker.Add(num, 1);
            }
        }

        for (int i = 0; i < playerGuess.Length; i++)
        {
            if (answerTracker.ContainsKey(playerGuess[i]) && answerTracker[playerGuess[i]] > 0)
            {
                answerTracker[playerGuess[i]]--;
                numCorrect++;
            }
            if (playerGuess[i] == answerToGuess[i]) positionCorrect++;
        }

        guessCount++;

        if(positionCorrect == answerToGuess.Length)
        {
            feedback.Add($"Great job, you got it in {guessCount} attempts!");
            gameWon = true;
            EndGame(true);
        }
        else
        {
            feedback.Add($"You guessed {gamePageModel.PlayerGuess} and got {numCorrect} numbers correct and {positionCorrect} positions correct.");
            if(guessCount >= MAX_ATTEMPTS)
            {
                feedback.Add($"The correct answer was {answerToGuess} Unfortunately that was your last chance, try playing again");
                EndGame(false);
            }
        }
    }

    public async void EndGame(bool isWinner)
    {
        gameEnded = true;

        // Prepare gameDto for game save
        gameDto.AnswerToGuess = answerToGuess;
        // Hard coding for now until difficulty implemented
        gameDto.Difficulty = gamePageModel.Difficulty;
        gameDto.IsWinner = isWinner;
        gameDto.AttemptsUsed = guessCount;
        await _gameService.SaveGameAsync(gameDto);
    }

    public void RestartGame()
    {
        feedback = feedback = new List<string>();
        gameStarted = false;
    }

    public void GetHint()
    {
        if(remainingHints > 0)
        {
            var hintPosition = answerToGuess.Length - remainingHints;
            var hint = $"The number in position {hintPosition + 1} is {answerToGuess[hintPosition]}";
            feedback.Add($"Hint: {hint}");
            remainingHints--;
        }
        else
        {
            feedback.Add($"You have no more hints remaining");
        };
    }

    public void GiveAnswer()
    {
        feedback.Add($"The correct answer was {answerToGuess.ToString()}");
    }
}
