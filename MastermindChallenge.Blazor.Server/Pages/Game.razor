@page "/game"
@using MastermindChallenge.Blazor.Server.Models
@using MastermindChallenge.Blazor.Server.Services.Game
@using System.Security.Claims
@inject IClient _httpClient
@inject IGameService _gameService
@inject AuthenticationStateProvider _authenticationStateProvider

<h3>Game</h3>

@if (!gameStarted)
{
    <p>@userName</p>
    <EditForm Model="gamePageModel" OnInvalidSubmit="StartGame">
        <InputRadioGroup @bind-Value="gamePageModel.Difficulty">
            <div>
                <InputRadio id="easy" Value="4" Checked />
                <label for="easy">Easy</label>
            </div>

            <div>
                <InputRadio id="medium" Value="5" />
                <label for="medium">Medium</label>
            </div>

            <div>
                <InputRadio id="hard" Value="6" />
                <label for="hard">Hard</label>
            </div>
        </InputRadioGroup>
        <button type="submit" class="btn btn-primary" @onclick="StartGame">Start Game</button>
    </EditForm>
}

@if(gameStarted)
{
    @if(!gameEnded)
    {
        <p>Attempts: @guessCount / @MAX_ATTEMPTS </p>
        <EditForm Model="gamePageModel" OnValidSubmit="HandleGuess">
            <div class="form-group">
                <label for="guess">Enter Guess</label>
                <InputText class="form-control" @bind-Value="gamePageModel.PlayerGuess" />
                <ValidationMessage For="@(() => gamePageModel.PlayerGuess)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Submit Guess</button>
        </EditForm>
    }
    else
    {
        <button class="btn btn-primary" @onclick="RestartGame">Play Again</button>
    }

}

@if(feedback.Count > 0)
{
    @foreach (var message in feedback)
    {
        <p>@message</p>
        <br />
    }
}

@if(answerToGuess != null)
{
    <h1>@string.Join("", answerToGuess)</h1>
}

@code {
    private bool gameStarted = false;
    private bool gameEnded = false;
    private bool gameWon = false;
    private List<string> feedback = new List<string>();
    private int guessCount = 0;
    private const int MAX_ATTEMPTS = 10;
    GamePage gamePageModel = new GamePage();
    int[] answerToGuess;
    int[] playerGuess;
    SaveGameDto gameDto = new SaveGameDto();
    string userName = "Not a username";

    private void HandleGuess()
    {
        var numCorrect = 0;
        var positionCorrect = 0;
        var answerTracker = new Dictionary<int, int>();

        if(gamePageModel.PlayerGuess == null || gamePageModel.PlayerGuess.Length != answerToGuess.Length)
        {
            feedback.Add($"Invalid guess. Please only guess {answerToGuess.Length} digits.");
            return;
        }

        for (int i = 0; i < gamePageModel.PlayerGuess.Length; i++)
        {
            if(Char.IsLetter(gamePageModel.PlayerGuess[i]))
            {
                feedback.Add($"Invalid guess. Please only use numbers.");
                return;
            }
            playerGuess[i] = int.Parse(gamePageModel.PlayerGuess[i].ToString());
        }

        // This will be used to improve the efficiency of determining if the player guessed a number correctly
        foreach (var num in answerToGuess)
        {
            if (answerTracker.ContainsKey(num))
            {
                answerTracker[num]++;
            }
            else
            {
                answerTracker.Add(num, 1);
            }
        }

        for (int i = 0; i < playerGuess.Length; i++)
        {
            if (answerTracker.ContainsKey(playerGuess[i]) && answerTracker[playerGuess[i]] > 0)
            {
                answerTracker[playerGuess[i]]--;
                numCorrect++;
            }
            if (playerGuess[i] == answerToGuess[i]) positionCorrect++;
        }

        guessCount++;

        if(positionCorrect == answerToGuess.Length)
        {
            feedback.Add($"Great job, you got it in {guessCount} attempts!");
            gameWon = true;
            EndGame(true);
        }
        else
        {
            feedback.Add($"You guessed {gamePageModel.PlayerGuess} and got {numCorrect} numbers correct and {positionCorrect} positions correct.");
            if(guessCount >= MAX_ATTEMPTS)
            {
                feedback.Add($"The correct answer was {answerToGuess} Unfortunately that was your last chance, try playing again");
                EndGame(false);
            }
        }
    }

    public async void StartGame() 
    {
        gameEnded = false;
        gameStarted = true;
        feedback = new List<string>();
        guessCount = 0;
        playerGuess = new int[gamePageModel.Difficulty];

        answerToGuess = _gameService.GetRandomNumber(gamePageModel.Difficulty);
    }

    public async void EndGame(bool isWinner)
    {
        gameEnded = true;

        // Prepare gameDto for game save
        gameDto.AnswerToGuess = answerToGuess;
        // Hard coding for now until difficulty implemented
        gameDto.Difficulty = gamePageModel.Difficulty;
        gameDto.IsWinner = isWinner;
        gameDto.AttemptsUsed = guessCount;
        await _gameService.SaveGameAsync(gameDto);
    }

    public void RestartGame()
    {
        feedback = feedback = new List<string>();
        gameStarted = false;
    }
}
